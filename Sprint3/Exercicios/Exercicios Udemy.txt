Desenvolva um código Python que lê do teclado nome e a idade atual de uma pessoa. Como saída, imprima o ano em que a pessoa completará 100 anos de idade.

nome = input("Digite seu nome: ")
idade = int(input("Digite sua idade: "))
ano_atual = 2023
cem_anos = ano_atual + (100 - idade)
print(f"{cem_anos}")



Escreva um código Python para verificar se três números digitados na entrada padrão são pares ou ímpares. Para cada número, imprima como saída Par: ou Ímpar: e o número correspondente (um linha para cada número lido).
Importante: Aplique a função range() em seu código.

num1 = int(input("1º número: "))
num2 = int(input("2º número: "))
num3 = int(input("3º número: "))
for numero in range(num1, num3+1):
    if numero % 2 == 0:
        print("Par:", numero)
    else:
        print("Ímpar:",numero)



Escreva um código Python para imprimir os números pares de 0 até 20 (incluso).
Importante: Aplique a função range() em seu código.

for num in range(0,21):
 if num % 2==0:
    print(num)



Escreva um código Python para imprimir todos os números primos entre 1 até 100. Lembre-se que você deverá desenvolver o cálculo que identifica se um número é primo ou não.
Importante: Aplique a função range().

def primo(numeros):
    if numeros < 2:
        return False
    for i in range(2, numeros):
        if numeros % i == 0:
            return False
    return True
for numeros in range(1, 101):
    if primo(numeros):
        print(numeros)



Escreva um código Python que declara 3 variáveis:
dia, inicializada com valor 22
mes, inicializada com valor 10 e
ano, inicializada com valor 2022
Como saída, você deverá imprimir a data correspondente, no formato a seguir dia/mes/ano.

dia=22
mes=10
ano=2022
data= str(dia)+"/"+str(mes)+"/"+str(ano)
print(data)



Considere as duas listas abaixo:

a = [1, 1, 2, 3, 5, 8, 14, 21, 34, 55, 89]
b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]

Escreva um programa para avaliar o que ambas as listas têm em comum (sem repetições), imprimindo a lista de valores da interseção na saída padrão.
Importante:  Esperamos que você utilize o construtor set() em seu código

a = [1, 1, 2, 3, 5, 8, 14, 21, 34, 55, 89]
b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
setA=set(a) 
setB=set(b)
par=setA.intersection(setB)
pares = list(par)
print(pares)



Dada a seguinte lista:
a = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
Faça um programa que gere uma nova lista contendo apenas números ímpares.

a = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
novalista= []
for num in a:
    if num % 2 != 0:
       novalista.append(num)
print(novalista)



Verifique se cada uma das palavras da lista ['maça', 'arara', 'audio', 'radio', 'radar', 'moto'] é ou não um palíndromo.
Obs: Palíndromo é uma palavra que permanece igual se lida de traz pra frente.
É necessário que você imprima no console exatamente assim:
A palavra: maça não é um palíndromo
A palavra: arara é um palíndromo 
A palavra: audio não é um palíndromo
A palavra: radio não é um palíndromo
A palavra: radar é um palíndromo
A palavra: moto não é um palíndromo

lista = ['maça', 'arara', 'audio', 'radio', 'radar', 'moto']
for palindromo in lista:
    if palindromo == palindromo[::-1]:
        print(f'A palavra: {palindromo} é um palíndromo')
    else:
        print(f'A palavra: {palindromo} não é um palíndromo')



Dada as listas a seguir:
primeirosNomes = ['Joao', 'Douglas', 'Lucas', 'José']
sobreNomes = ['Soares', 'Souza', 'Silveira', 'Pedreira']
idades = [19, 28, 25, 31]
Faça um programa que imprima o dados na seguinte estrutura: "índice - primeiroNome sobreNome está com idade anos".
Exemplo:
0 - João Soares está com 19 anos

primeirosNomes = ['Joao', 'Douglas', 'Lucas', 'José']
sobreNomes = ['Soares', 'Souza', 'Silveira', 'Pedreira']
idades = [19, 28, 25, 31]
for indice, (nome, sobrenome, idade) in enumerate(zip(primeirosNomes, sobreNomes, idades)):
    print (f"{indice} - {nome} {sobrenome} está com {idade} anos")



Escreva uma função que recebe uma lista e retorna uma nova lista sem elementos duplicados. Utilize a lista a seguir para testar sua função.
['abc', 'abc', 'abc', '123', 'abc', '123', '123']

def removeduplicados():
    novalista = list(set(lista))
    return novalista
    for duplicados in lista:
        if duplicados not in novalista:
            novalista.append(duplicados)
    return novalista
lista = ['abc', 'abc', 'abc', '123', 'abc', '123', '123']
novalista = removeduplicados()
print(novalista)



m programa para ler o conteúdo do arquivo texto arquivo_texto.txt e imprimir o seu conteúdo.
Dica: leia a documentação da função open(...)

arquivo = open("arquivo_texto.txt")
informacoes=arquivo.read()
print(informacoes)
arquivo.close()



Leia o arquivo person.json, faça o parsing e imprima seu conteúdo.
Dica: leia a documentação do pacote json

import json

with open('person.json') as arquivo:
    conteudo = json.load(arquivo)

print(conteudo)



Implemente a função my_map(list, f) que recebe uma lista como primeiro argumento e uma função como segundo argumento. Esta função aplica a função recebida para cada elemento da lista recebida e retorna o resultado em uma nova lista.
Teste sua função com a lista de entrada [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] e com uma função que potência de 2 para cada elemento.

def my_map(list, f):
    return [f(potencia) for potencia in list]

lista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
resultado = my_map(lista, lambda potencia: potencia**2)

print(resultado)



Escreva uma função que recebe um número variável de parâmetros não nomeados e um número variado de parâmetros nomeados e imprime o valor de cada parâmetro recebido.
Teste sua função com os seguintes parâmetros:
(1, 3, 4, 'hello', parametro_nomeado='alguma coisa', x=20)

def parametros(*args, **kwargs):
    
    for arg in args:
        print(arg)
    
    for key, value in kwargs.items():
        print(f"{value}")

parametros(1, 3, 4, 'hello', parametro_nomeado='alguma coisa', x=20)



Implemente a classe Lampada. A classe Lâmpada recebe um booleano no seu construtor, Truese a lâmpada estiver ligada, False caso esteja desligada. A classe Lampada possuí os seguintes métodos:
liga(): muda o estado da lâmpada para ligada
desliga(): muda o estado da lâmpada para desligada
esta_ligada(): retorna verdadeiro se a lâmpada estiver ligada, falso caso contrário
Para testar sua classe:
Ligue a Lampada
Imprima: A lâmpada está ligada? True
Desligue a Lampada
Imprima: A lâmpada ainda está ligada? False

class Lampada:
    def __init__(se, ligada):
        se.ligada = ligada

    def liga(se):
        se.ligada = True

    def desliga(se):
        se.ligada = False

    def esta_ligada(se):
        return se.ligada

lampada = Lampada(True)

lampada.liga()

print("A lâmpada está ligada?", lampada.esta_ligada())

lampada.desliga()

print("A lâmpada ainda está ligada?", lampada.esta_ligada())



Escreva uma função que recebe uma string de números separados por vírgula e retorne a soma de todos eles. Depois imprima a soma dos valores.
A string deve ter valor  "1,3,4,6,10,76"

def somavalores(stringnumeros):
    numeros = stringnumeros.split(",")
    soma = 0
    for numero in numeros:
        soma += int(numero)
    return soma

strnumeros = "1,3,4,6,10,76"
soma = somavalores(strnumeros)
print(soma)



Escreva uma função que recebe como parâmetro uma lista e retorna 3 listas: a lista recebida dividida em 3 partes iguais. Teste sua implementação com a lista abaixo
lista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]

def dividirlista(lista):
    tamanho = len(lista)
    parte = tamanho // 3
    
    part1 = lista [:parte]
    part2 = lista [parte:2*parte]
    part3 = lista [2*parte:]
    return part1, part2, part3

lista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
partes = dividirlista(lista)

print(partes[0], partes[1], partes[2])



Dado o dicionário a seguir:
speed = {'jan':47, 'feb':52, 'march':47, 'April':44, 'May':52, 'June':53, 'july':54, 'Aug':44, 'Sept':54}
Crie uma lista com todos os valores (não as chaves!) e coloque numa lista de forma que não haja valores duplicados.

speed = {'jan':47, 'feb':52, 'march':47, 'April':44, 'May':52, 'June':53, 'july':54, 'Aug':44, 'Sept':54}
valoresnaoduplicados = list(set(speed.values()))
print(valoresnaoduplicados)



Calcule o valor mínimo, valor máximo, valor médio e a mediana da lista gerada na célula abaixo:
Obs.: Lembrem-se, para calcular a mediana a lista deve estar ordenada!
import random 
# amostra aleatoriamente 50 números do intervalo 0...500
random_list = random.sample(range(500),50)

Use as variáveis abaixo para representar cada operação matemática:
mediana
media
valor_minimo 
valor_maximo 
Importante: Esperamos que você utilize as funções abaixo em seu código:
random
max
min
sum

import random

mediana = 0
media = 0
valor_minimo = 0
valor_maximo = 0

random_list = random.sample(range(500), 50)

random_list.sort()
valor_maximo=max(random_list)
media=sum(random_list)/len(random_list)
valor_minimo=min(random_list)
if len(random_list) % 2==0:
   mediana=(random_list[len(random_list)//2]+random_list[len(random_list)//2-1])/2
else:
   mediana=random_list[len(random_list)//2]
   
resultado = (f"Media: {media}, Mediana: {mediana}, Mínimo: {valor_minimo}, Máximo: {valor_maximo}")

print(resultado)



Imprima a lista abaixo de trás para frente.
a = [1, 0, 2, 3, 5, 8, 13, 21, 34, 55, 89]

a = [1, 0, 2, 3, 5, 8, 13, 21, 34, 55, 89]
listatrasfrente = list(reversed(a))
print(listatrasfrente)



Implemente duas classes, Pato e Pardal , que herdam de uma superclasse chamada Passaro as habilidades de voar e emitir som.
Contudo, tanto Pato quanto Pardal devem emitir sons diferentes (de maneira escrita) no console, conforme o modelo a seguir.
Imprima no console exatamente assim:
Pato
Voando...
Pato emitindo som...
Quack Quack
Pardal
Voando...
Pardal emitindo som...
Piu Piu

class Passaro:
    def voar(self):
        print("Voando...")

    def emitir_som(self):
        pass

class Pato(Passaro):
    def emitir_som(self):
        print("Quack Quack")

class Pardal(Passaro):
    def emitir_som(self):
        print("Piu Piu")

pato = Pato()
print("Pato")
pato.voar()
print("Pato emitindo som...")
pato.emitir_som()

pardal = Pardal()
print("Pardal")
pardal.voar()
print("Pardal emitindo som...")
pardal.emitir_som()




Crie uma classe chamada Pessoa, com um atributo privado chamado nome (declarado internamente na classe como __nome) e um atributo público de nome id.
Adicione dois métodos à classe, sendo um para definir o valor de __nome e outro para retornar o valor do respectivo atributo.
Lembre-se que o acesso ao atributo privado deve ocorrer somente através dos métodos definidos, nunca diretamente.  Você pode alcançar este comportamento através do recurso de properties do Python.
Veja um exemplo de como seu atributo privado pode ser lido e escrito:
pessoa = Pessoa(0) 
pessoa.nome = 'Fulano De Tal'
print(pessoa.nome)

class Pessoa:
    def __init__(self, id):
        self.__nome = None
        self.id = id

    @property
    def nome(self):
        return self.__nome

    @nome.setter
    def nome(self, novo_nome):
        self.__nome = novo_nome


pessoa = Pessoa(id=1)
pessoa.nome = 'Fulano de Tal'
print(f"ID: {pessoa.id}, Nome: {pessoa.nome}")



Crie uma classe  Calculo  que contenha um método que aceita dois parâmetros, X e Y, e retorne a soma dos dois. Nessa mesma classe, implemente um método de subtração, que aceita dois parâmetros, X e Y, e retorne a subtração dos dois (resultados negativos são permitidos).
Utilize os valores abaixo para testar seu exercício:
x = 4 
y = 5
imprima:
Somando: 4+5 = 9
Subtraindo: 4-5 = -1

class Calculo:
    x=4
    y=5
    soma= 4+5
    subtraindo =float(4-5)

print (f'Somando: {Calculo.soma}')
print (f'Subtraindo: {Calculo.subtraindo}')




Crie uma classe Ordenadora que contenha um atributo listaBaguncada e que contenha os métodos ordenacaoCrescente e ordenacaoDecrescente.
Instancie um objeto chamado crescente dessa classe Ordenadora que tenha como listaBaguncada a lista [3,4,2,1,5] e instancie um outro objeto, decrescente dessa mesma classe com uma outra listaBaguncada sendo [9,7,6,8].
Para o primeiro objeto citado, use o método ordenacaoCrescente e para o segundo objeto, use o método ordenacaoDecrescente.
Imprima o resultado da ordenação crescente e da ordenação decresce
[1, 2, 3, 4, 5] 
[9, 8, 7, 6]

class Ordenadora:
    def __init__(self, listaBaguncada):
        self.listaBaguncada = listaBaguncada
        
    def ordenacaoCrescente(self):
        self.listaBaguncada.sort()
        return self.listaBaguncada

    def ordenacaoDecrescente(self):
        self.listaBaguncada.sort(reverse=True)
        return self.listaBaguncada

crescente = Ordenadora([3, 4, 2, 1, 5])
decrescente = Ordenadora([9, 7, 6, 8])

listacrescente = crescente.ordenacaoCrescente()
listadecrescente = decrescente.ordenacaoDecrescente()

print(listacrescente)
print(listadecrescente)



Crie uma classe Avião que possua os atributos modelo, velocidade_maxima, cor e capacidade.
Defina o atributo cor de sua classe , de maneira que todas as instâncias de sua classe avião sejam da cor “azul”.
Após isso, a partir de entradas abaixo, instancie e armazene em uma lista 3 objetos da classe Avião.
Ao final, itere pela lista imprimindo cada um dos objetos no seguinte formato:
“O avião de modelo “x” possui uma velocidade máxima de “y”, capacidade para “z” passageiros e é da cor “w”.
Sendo x, y, z e w cada um dos atributos da classe “Avião”.
Valores de entrada:
modelo BOIENG456: velocidade máxima 1500 km/h: capacidade para 400 passageiros: Cor Azul
modelo Embraer Praetor 600: velocidade máxima 863km/h: capacidade para 14 passageiros: Cor Azul
modelo Antonov An-2: velocidade máxima de 258 Km/h: capacidade para 12 passageiros: Cor Azul

class Aviao:
    cor = "azul"
    
    def __init__(self, modelo, velocidade_maxima, capacidade):
        self.modelo = modelo
        self.velocidade_maxima = velocidade_maxima
        self.capacidade = capacidade
        
avioes = [
    Aviao("BOIENG456", "1500 km/h", "400 passageiros"),
    Aviao("Embraer Praetor 600", "863 km/h", "14 passageiros"),
    Aviao("Antonov An-2", "258 km/h", "12 passageiros")
]

for aviao in avioes:
    print(f"O avião de modelo {aviao.modelo} possui uma velocidade máxima de {aviao.velocidade_maxima}, capacidade para {aviao.capacidade} e é da cor {aviao.cor}.")

